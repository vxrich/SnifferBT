MAC ADDRESS GALAXY A5: 1C:23:2C:03:F7:04
MAC ADDRESS ID107 HR: C1:91:34:83:0E:F0
MAC ADDRESS webOS TV: 14:BB:6E:02:E2:79 (public) /7D:99:6A:39:EF:F8 (random)
MAC ADDRESS YDY NRF M106: FB:D2:31:5A:FC:47

ID107 HR --> Facile da trovare.
MOTO 360 --> Non facile da trovare, sembra faccia advertising.
CARDIO BELT POLAR --> Non si accende per ora.
GALAXY A5 --> Probabilemente esegue lo scan non in BLE 

devices.append(ScanedDevice("rpi_1", "test_1", "BB:BB:BB:BB:BB:BB", -30))
devices.append(ScanedDevice("rpi_1", "test_2", "CC:CC:CC:CC:CC:CC", -36))
devices.append(ScanedDevice("rpi_2", "test_2", "CC:CC:CC:CC:CC:CC", -50))
devices.append(ScanedDevice("rpi_3", "test_2", "CC:CC:CC:CC:CC:CC", -87))
devices.append(ScanedDevice("rpi_2", "test_3", "DD:DD:DD:DD:DD:DD", -20))

beacons.append(RPiBeacon(binascii.hexlify("rpi_1-angolodx"),"11:11:11:11:11:11",-50))
beacons.append(RPiBeacon(binascii.hexlify("rpi_2-angolosx"),"22:22:22:22:22:22",-32))
beacons.append(RPiBeacon(binascii.hexlify("rpi_3-finestra"),"33:33:33:33:33:33",-67))


--------------------------------------------------------------------------------------

// btmgmt // 
Modulo presente nel pacchetto bluez di linux, sono gli stessi comandi implementati da
BluePy ma riesce a trovare anche gli smartphone.
Fornisce anche RSSI e altri parametri

// sdptool //
Service Discovery Protocol, serve per rilevare i servizi che un dispositivo Bluetooth
può fornire. 
Ha problemi con smartband e activity tracker (Host is Down, come se rifiutassero lo scan)
per gli smartphone sembra non avere problemi.

// BluePy //
Lavora bene con i dispositivi BLE, non trova il cellulare, ne il MOTO360.
Fornisce tutti i dati richiesti dal progetto di tesi.
Ritorna un oggetto

// Bleep //
Non funziona

// Bluez //
Per non far crashare il WiFi bisonga fare down e up di hci0 tramite hciconfig 
(ma comunque non funziona sempre -.-)
Lo scan funziona correttamente basta non farlo partire con SSH altrimenti salta 
la connessione, facendolo partire direttamente dalla RPi fa saltare la connessione 
WiFi del pertatile senza essere collegato ad esso in SSH

// BluezBLE //
Non funzione, non esiste discover_devices()

// hcitool lescnan //
Vede ID107 HR ma non vede telefono e MOTO360

// iBeacon //
Rileva tutti i dispositivi che fanno advertising in modalità slave (smartband, webtv)

--------------------------------------------------------------------------------------

BluePy per i dispositivi BLE con advertising e Bluez per i dispositivi non BLE o comunque che non 
lo usano di default (Smartphone)

1/10/2018
Lo scan dei dispositivi viene effettuato con i tool integrati in linux:
btmgmt --> Per trovare i dispositivi
sdptool --> Per identificare i servizi che offrono
Questi tool sono più efficaci delle librerie Bluetooth per Python.

I dati vengono caricati in un DB sottoforma di oggetti serializzati in modo che possano essere 
scaricati dal programma "server" che li scarica e li converte in oggetti tramite il modulo cPickle.
Gli oggetti verrano poi analizzati sfruttando i dati degli RPiBeacon per effettuare una triangolazione
e identificare il numero di persone nell'ambiente

5/10/2018
Localizzazione degli RPi_Beacon è implementabile:
- Creare uno oggetto stanza e loclizarli con le coordinate x e y misurate a mano

15/10/2018

