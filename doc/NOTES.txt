MAC ADDRESS GALAXY A5: 1C:23:2C:03:F7:04
MAC ADDRESS ID107 HR: C1:91:34:83:0E:F0
MAC ADDRESS webOS TV: 14:BB:6E:02:E2:79 (public) /7D:99:6A:39:EF:F8 (random)
MAC ADDRESS YDY NRF M106: FB:D2:31:5A:FC:47

ID107 HR --> Facile da trovare.
MOTO 360 --> Non facile da trovare, sembra faccia advertising.
CARDIO BELT POLAR --> Non si accende per ora.
GALAXY A5 --> Probabilemente esegue lo scan non in BLE 

devices.append(ScanedDevice("rpi_1", "test_1", "BB:BB:BB:BB:BB:BB", -30))
devices.append(ScanedDevice("rpi_1", "test_2", "CC:CC:CC:CC:CC:CC", -36))
devices.append(ScanedDevice("rpi_2", "test_2", "CC:CC:CC:CC:CC:CC", -50))
devices.append(ScanedDevice("rpi_3", "test_2", "CC:CC:CC:CC:CC:CC", -87))
devices.append(ScanedDevice("rpi_2", "test_3", "DD:DD:DD:DD:DD:DD", -20))
devices.append(ScanedDevice("rpi_3", "test_1", "BB:BB:BB:BB:BB:BB", -60))

beacons.append(RPiBeacon(binascii.hexlify("rpi_1-angolodx-0-0"),"11:11:11:11:11:11",-50))
beacons.append(RPiBeacon(binascii.hexlify("rpi_2-angolosx-10-10"),"22:22:22:22:22:22",-32))
beacons.append(RPiBeacon(binascii.hexlify("rpi_3-finestra-0-10"),"33:33:33:33:33:33",-67))


--------------------------------------------------------------------------------------

// btmgmt // 
Modulo presente nel pacchetto bluez di linux, sono gli stessi comandi implementati da
BluePy ma riesce a trovare anche gli smartphone.
Fornisce anche RSSI e altri parametri

// sdptool //
Service Discovery Protocol, serve per rilevare i servizi che un dispositivo Bluetooth
può fornire. 
Ha problemi con smartband e activity tracker (Host is Down, come se rifiutassero lo scan)
per gli smartphone sembra non avere problemi.

// BluePy //
Lavora bene con i dispositivi BLE, non trova il cellulare, ne il MOTO360.
Fornisce tutti i dati richiesti dal progetto di tesi.
Ritorna un oggetto

// Bleep //
Non funziona

// Bluez //
Per non far crashare il WiFi bisonga fare down e up di hci0 tramite hciconfig 
(ma comunque non funziona sempre -.-)
Lo scan funziona correttamente basta non farlo partire con SSH altrimenti salta 
la connessione, facendolo partire direttamente dalla RPi fa saltare la connessione 
WiFi del pertatile senza essere collegato ad esso in SSH

// BluezBLE //
Non funzione, non esiste discover_devices()

// hcitool lescnan //
Vede ID107 HR ma non vede telefono e MOTO360

// iBeacon //
Rileva tutti i dispositivi che fanno advertising in modalità slave (smartband, webtv)

--------------------------------------------------------------------------------------

BluePy per i dispositivi BLE con advertising e Bluez per i dispositivi non BLE o comunque che non 
lo usano di default (Smartphone)

1/10/2018
Lo scan dei dispositivi viene effettuato con i tool integrati in linux:
btmgmt --> Per trovare i dispositivi
sdptool --> Per identificare i servizi che offrono
Questi tool sono più efficaci delle librerie Bluetooth per Python.

I dati vengono caricati in un DB sottoforma di oggetti serializzati in modo che possano essere 
scaricati dal programma "server" che li scarica e li converte in oggetti tramite il modulo cPickle.
Gli oggetti verrano poi analizzati sfruttando i dati degli RPiBeacon per effettuare una triangolazione
e identificare il numero di persone nell'ambiente

5/10/2018
Localizzazione degli RPi_Beacon è implementabile:
- Creare uno oggetto stanza e localizzarli con le coordinate x e y misurate a mano

16/10/2018
Implementazione triangolazione:
- Ordino la lista dei dispositivi scansionati
- Prendo tutti i dispositivi con lo stesso indirizzo
- Creo le circonferenze relative ad ogni dispositivo sfruttando Point di python
    Con i Point di python possono creare un cerchio e non una circonferenza, quindi nell'intersezione ottengo
    anche i punti interni.
    Anche facendo la sottrazione di due circonferenze concentriche ottengo una corona circolare la quale 
    individua comunque più punti interni.

18/10/2018
Il calcolo dei punti verrà fatto ogni 2 circonferenze, sfruttando i raggi e la formula del coseno, ottenuti
gli angoli si calcolano le intersezioni tramite le coordinate polari.

6/12/2018
I dispositivi, come le cuffie bluetooth, se sono connessi ad un master, uno smartphone, non vengono
trovate ma lo smartphone viene comunque trovato dallo sniffer. Fatto positivo perchè non dobbiamo
andare a trattare device in più perchè meglio avere lo scan degli smartphone perchè generalmente a uno
smartphone corrisponde una persona.

7/12/2018
I dispositivi come le smartband (Mi Band, Amazfit Bip Watch, ..) vengono rilevate ma non è possibile effettuare
la ricerca dei servizi, è possibile, nel programma associarle ai dispositivi che non ci restituiscono nulla
nella ricerca dei servizi e distinguerli per questa caratteristica.

14/12/2018
Controllo e verifica che il metodo di triangolazione trovi il punto corretto.

15/12/2018
In testTriangulation sto sviluppando con i dovuti accorgimenti sul numero di cerchi l'algoritmo per
l'individuazione del punto in cui viene rilevato il dispositivo.

16/12/2018
Dall'esempio in testTriangulation.py (Usando valori casuali), l'algoritmo per il calcolo dei punti funziona.
Viene rilevato lo stesso punto utilizzando le intersezioni fra rette differenti.
--> Si deve adattare a snifferBTServer.py, salvando i punti nei valori x e y e eliminando i doppioni. (Fatto)

3/12/2019
Individuare se ci sono dispositivi in un raggio ristretto di un punto e catalogarli tramite i servizi GATT
in modo da determinare successivamente le persone.
Potrebbe essere possibile trovare il numero di persone rilevando solo il bluetooth degli smartphone
(hanno i servizi facilmente riconoscibili). Sarebbe necessario fare un'analisi statistica su quanti
possiedono un dispositivo, più facilmente una smartband, accesa e non collegata ad uno smartphone.
Per quanto riguarda le cuffie bluetooth solitamente se sono accese sono anche connesse altrimenti sevono
a poco. 

